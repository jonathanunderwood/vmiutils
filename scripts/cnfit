#!/usr/bin/python

# Copyright (C) 2014 by Jonathan G. Underwood.
#
# This file is part of VMIUtils.
#
# VMIUtils is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# VMIUtils is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with VMIUtils.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
import logging
import numpy
import vmiutils as vmi
import vmiutils.ChoNa as cn
import matplotlib
matplotlib.use('PDF')
import matplotlib.pyplot as plot

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('cnfit')

parser = argparse.ArgumentParser(
    description='Utility for inverting a VMI image using the Cho and Na matrix')

parser.add_argument('vmi_file', help='Name of file containing VMI image')
parser.add_argument('--centre', nargs=2, type=float, default=None,
                    help='The x and y coordinates of the image centre (after swapping axes, if requested)')
parser.add_argument('--swapxy', action='store_true',
                    help='If specified, the image data will have the axes swapped before fitting')
parser.add_argument('--no-oddl', action='store_true',
                    help='If specified, only even l coefficients in the Legendre polynomial fitting will be used. CURRENTLY IGNORED - FIXME')
parser.add_argument('--lmax', type=int, default=2,
                    help='Maximum value of l in Legendre polynomial fitting')
parser.add_argument('--rbins', type=float, default=128,
                    help='Number of radial bins used for polar image')
parser.add_argument('--thetabins', type=float, default=128,
                    help='Number of angular bins used for polar image')
parser.add_argument('--order', type=int, default=3,
                    help='Interpolation order used when converting to polar image')
parser.add_argument('--plreg', action='store_true',
                    help='If specified, Projected Landweber regularization will be used')
parser.add_argument('--iterations', type=int, default=1000,
                    help='Number of iterations to use for regularization')

args = parser.parse_args()

# Load text file
try:
    imdat=numpy.loadtxt(args.vmi_file)
    logger.debug('image loaded and converted to cartesian image')
except IOError:
        logger.error('could not read file: {0}'.format(file))
        sys.exit(74)

# Swap axes if requested
if args.swapxy is True:
    imdat = imdat.transpose()

# Set centre - if not specified, use image centre of gravity
if args.centre == None:
    centre = None
    logger.info('image grid centre will be used as centre')
else:
    centre = args.centre

vmicart = vmi.CartesianImage(image=imdat, centre=centre)

# Resample the image so that centre lies on lower left corner of a
# pixel such that the quadrants are exact.
vmicart.resample(align_centre=True)

#  Invert the image
if args.plreg is False:
    logger.info('inverting image...')
    invimg_cart = cn.invert_CartesianImage(vmicart)
    logger.info('image inverted')
else:
    logger.info('inverting image using projected Landweber regularization...')
    invimg_cart = cn.invert_CartesianImage_plreg(vmicart)
    logger.info('image inverted')

# Convert inverted image to polar coordinates for finding radial spectrum and
# angular distribution
invimg_pol = vmi.PolarImage()
logger.info('converting to spherical polar coordinates...')
invimg_pol.from_CartesianImage(invimg_cart, rbins=args.rbins,
                           thetabins=args.thetabins, order=args.order)
logger.info('finished converting to spherical polar coordinates')

# Calculate radial spectrum
r1, spec = invimg_pol.radial_spectrum()
logger.debug('radial spectrum calculated')

# Calulate radial dependent beta coefficients
if args.no_oddl is True:
    oddl = False
else:
    oddl = True

r2, beta = invimg_pol.beta_coefficients(lmax=args.lmax)
logger.debug('beta coefficients calculated')

# Plotting - set up a 2x2 grid of plots, but have the radial spectrum span two
# plot columns
fig = plot.figure()
grid = matplotlib.gridspec.GridSpec(2, 2)

# Plot radial spectrum and beta coefficents
ax1 = plot.subplot(grid[0, :]) # Span both columns
ax1.plot(r1, spec)

ax2 = ax1.twinx()
#ax2.set_autoscaley_on(False)
#ax2.set_ybound(-5, 5)

for b in numpy.arange(0, beta.shape[0]):
    ax2.plot(r2, beta[b, :], label=r"$\beta_{%d}$"%b)
plot.legend()

# Plot experimental image
ax3 = plot.subplot(grid[1, 0])
im = ax3.imshow(vmicart.image.transpose(), origin='lower', 
                 cmap=plot.cm.gist_heat)
fig.colorbar(im)

# Plot inverted image
ax4 = plot.subplot(grid[1, 1])
im = ax4.imshow(invimg_cart.image.transpose().clip(0.0), origin='lower', 
                 cmap=plot.cm.gist_heat)
fig.colorbar(im)

plot.show()
plot.savefig('junk.pdf')
